name: Deploy to cPanel Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  PHP_VERSION: "8.3"

jobs:
  # Job 1: Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, curl
          coverage: none

      - name: 📦 Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 🔄 Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: 🔧 Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: 🔧 Setup Test Environment
        run: |
          echo "Setting up test environment..."

          # Create test .env file
          cat > .env << EOF
          # Database Configuration (Test)
          DB_HOST=localhost
          DB_NAME=test_commercio_db
          DB_USERNAME=root
          DB_PASSWORD=
          DB_PORT=3306

          # Application Configuration (Test)
          APP_ENV=testing
          APP_DEBUG=true
          APP_URL=http://localhost

          # Security (Test)
          APP_KEY=test-key-for-ci
          SECURE_SSL=false
          EOF

          echo "✅ Test environment configured"

      - name: 🧪 Run Test Suite
        run: |
          echo "✅ Running test suite..."

          # First, let's verify the test environment is set up
          echo "Current working directory: $(pwd)"
          echo "PHP version: $(php --version | head -n 1)"
          echo "Composer version: $(composer --version)"

          # Check if tests directory exists
          if [ -d "tests" ]; then
            echo "✅ Tests directory found"
            echo "Test files found: $(find tests -name '*.php' | wc -l)"
          else
            echo "❌ No tests directory found"
            exit 1
          fi

          # Run PestPHP tests with proper configuration
          echo "🧪 Executing PestPHP test suite..."

          # Create cache directory to prevent XML parsing issues
          mkdir -p .pest-cache

          # Run tests without configuration and disable caching to avoid XML parsing issues in CI
          ./vendor/bin/pest --no-configuration --do-not-cache-result --colors=never tests/

          if [ $? -eq 0 ]; then
            echo "🎉 All tests passed!"
          else
            echo "❌ Tests failed with exit code $?"
            exit 1
          fi

  # Job 2: Build and deploy (only after tests pass)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, json, curl, zip
          ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=512M
          coverage: none

      - name: ✅ Validate Composer
        run: |
          composer validate --strict --no-check-publish
          echo "✅ Composer validation passed"

      - name: 📦 Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: 🔄 Cache Composer Dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-prod-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-prod-

      - name: 🚀 Install Production Dependencies
        run: |
          composer install \
            --no-dev \
            --no-interaction \
            --no-progress \
            --optimize-autoloader \
            --classmap-authoritative \
            --prefer-dist
          echo "✅ Production dependencies installed"

      - name: 🔧 Create Production Environment
        run: |
          echo "Creating production environment file..."
          cat > .env << EOF
          # Database Configuration
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT || '3306' }}

          # Application Configuration
          APP_ENV=production
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL || 'https://mockerjson.xyz' }}

          # Security
          APP_KEY=${{ secrets.APP_KEY }}
          SECURE_SSL=true
          EOF

          # Validate .env file
          if [ -f .env ]; then
            echo "✅ Production .env file created successfully"
            echo "📄 Environment variables configured: $(grep -c "=" .env) variables"
          else
            echo "❌ Failed to create .env file"
            exit 1
          fi

      - name: 🗂️ Prepare Deployment Files
        run: |
          echo "Preparing files for deployment..."

          # Create deployment directory
          mkdir -p deploy

          # Copy application files
          cp -r app/ deploy/
          cp -r bootstrap/ deploy/
          cp -r config/ deploy/
          cp -r public/ deploy/
          cp -r routes/ deploy/
          cp -r storage/ deploy/
          cp -r vendor/ deploy/

          # Copy configuration files
          cp .env deploy/
          cp composer.json deploy/

          # Create necessary directories with proper permissions
          mkdir -p deploy/storage/logs
          chmod -R 755 deploy/storage/

          # Set proper file permissions
          find deploy/ -type f -exec chmod 644 {} \;
          find deploy/ -type d -exec chmod 755 {} \;

          # Make sure .env is readable
          chmod 644 deploy/.env

          echo "✅ Deployment files prepared"
          echo "📦 Total files: $(find deploy/ -type f | wc -l)"
          echo "📁 Total directories: $(find deploy/ -type d | wc -l)"

      - name: 🧹 Production Cleanup
        run: |
          echo "Cleaning up development files..."

          # Remove development and testing files
          rm -rf deploy/tests/ 2>/dev/null || true
          rm -f deploy/.git* 2>/dev/null || true
          rm -f deploy/phpunit.xml* 2>/dev/null || true
          rm -f deploy/Pest.php 2>/dev/null || true
          rm -f deploy/README.md 2>/dev/null || true
          rm -f deploy/composer.lock 2>/dev/null || true

          # Remove any hidden development files
          find deploy/ -name ".*" -type f ! -name ".env" -delete 2>/dev/null || true
          find deploy/ -name "*.md" -type f -delete 2>/dev/null || true
          find deploy/ -name ".DS_Store" -type f -delete 2>/dev/null || true

          echo "✅ Development files cleaned up"

      - name: 🔐 Security Hardening
        run: |
          echo "Applying security hardening..."

          # Create .htaccess for public directory if it doesn't exist
          if [ ! -f deploy/public/.htaccess ]; then
            cat > deploy/public/.htaccess << 'EOF'
          RewriteEngine On

          # Handle Angular and Vue.js routes
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteRule ^(.*)$ index.php [QSA,L]

          # Security headers
          Header always set X-Content-Type-Options nosniff
          Header always set X-Frame-Options DENY
          Header always set X-XSS-Protection "1; mode=block"
          Header always set Referrer-Policy "strict-origin-when-cross-origin"

          # Hide server signature
          ServerTokens Prod
          EOF
          fi

          # Secure sensitive directories
          echo "Deny from all" > deploy/storage/.htaccess
          echo "Deny from all" > deploy/app/.htaccess
          echo "Deny from all" > deploy/bootstrap/.htaccess
          echo "Deny from all" > deploy/config/.htaccess

          echo "✅ Security hardening applied"

      - name: 🧹 Pre-Deployment Cleanup (Shared Hosting Safe)
        run: |
          echo "Creating cleanup script for shared hosting..."
          cat > cleanup-remote.sh << 'EOF'
          #!/bin/bash

          # Define remote path (will be set by environment variable)
          REMOTE_PATH="${REMOTE_PATH:-/public_html/mockerjson.xyz/}"

          echo "🧹 Cleaning up old directory structure..."

          # Remove old directory structures that may conflict
          echo "Removing old 'src/' directory if exists..."
          rm -rf "${REMOTE_PATH}src/" 2>/dev/null || true

          echo "Removing old 'https/' directory if exists..."
          rm -rf "${REMOTE_PATH}https/" 2>/dev/null || true

          # Remove specific old files that might cause conflicts
          echo "Removing old autoloader files..."
          rm -f "${REMOTE_PATH}autoload.php" 2>/dev/null || true
          rm -f "${REMOTE_PATH}spl_autoload.php" 2>/dev/null || true

          # Remove old config files that might have wrong paths
          echo "Removing potentially outdated config files..."
          rm -f "${REMOTE_PATH}config/old_config.php" 2>/dev/null || true

          # Clean up old vendor directories (except current one)
          echo "Cleaning up old vendor backups..."
          rm -rf "${REMOTE_PATH}vendor_backup/" 2>/dev/null || true
          rm -rf "${REMOTE_PATH}vendor.old/" 2>/dev/null || true

          # Remove old test directories (should not be in production)
          echo "Removing test directories from production..."
          rm -rf "${REMOTE_PATH}tests/" 2>/dev/null || true
          rm -rf "${REMOTE_PATH}test/" 2>/dev/null || true

          # Remove development files
          echo "Removing development files..."
          rm -f "${REMOTE_PATH}.env.example" 2>/dev/null || true
          rm -f "${REMOTE_PATH}phpunit.xml" 2>/dev/null || true
          rm -f "${REMOTE_PATH}Pest.php" 2>/dev/null || true
          rm -f "${REMOTE_PATH}composer.lock" 2>/dev/null || true
          rm -f "${REMOTE_PATH}README.md" 2>/dev/null || true

          # Remove any .git directories (security)
          echo "Removing any .git directories..."
          find "${REMOTE_PATH}" -name ".git" -type d -exec rm -rf {} + 2>/dev/null || true

          echo "✅ Pre-deployment cleanup completed"
          EOF

          chmod +x cleanup-remote.sh
          echo "✅ Cleanup script created"

      - name: 🚀 Deploy to cPanel via SFTP
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          server: ${{ secrets.FTP_HOST }}
          port: ${{ secrets.FTP_PORT || '21' }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local_path: "./deploy/"
          remote_path: ${{ secrets.REMOTE_PATH || '/mockerjson.xyz/' }}
          sftp_only: false
          delete_remote_files: false
        env:
          DEPLOY_TIMEOUT: 60000

      - name: 🧼 Post-Deployment Remote Cleanup
        run: |
          echo "Creating cleanup script for leftover files..."
          cat > deploy/cleanup.php << 'EOF'
          <?php
          // Cleanup script to remove old directory structure
          echo "🧹 Starting cleanup of old files...\n";

          // Define base path
          $basePath = __DIR__ . '/';

          // Directories to remove (old structure)
          $oldDirs = ['src', 'https', 'tests', 'test'];

          foreach ($oldDirs as $dir) {
              $fullPath = $basePath . $dir;
              if (is_dir($fullPath)) {
                  echo "Removing old directory: $dir\n";
                  exec("rm -rf " . escapeshellarg($fullPath));
              }
          }

          // Files to remove (development/old files)
          $oldFiles = [
              '.env.example',
              'phpunit.xml', 
              'Pest.php',
              'composer.lock',
              'README.md',
              'autoload.php',
              'spl_autoload.php'
          ];

          foreach ($oldFiles as $file) {
              $fullPath = $basePath . $file;
              if (file_exists($fullPath)) {
                  echo "Removing old file: $file\n";
                  unlink($fullPath);
              }
          }

          // Remove this cleanup script itself
          echo "Cleanup completed. Removing cleanup script...\n";
          unlink(__FILE__);
          EOF

          echo "✅ Cleanup script added to deployment"

      - name: 🧼 Execute Remote Cleanup
        run: |
          echo "Executing cleanup script on remote server..."

          # Execute the cleanup script via HTTP request
          API_URL="${{ secrets.APP_URL || 'https://mockerjson.xyz' }}"
          CLEANUP_URL="${API_URL}/cleanup.php"

          echo "Triggering cleanup at: $CLEANUP_URL"

          # Execute cleanup script
          CLEANUP_RESPONSE=$(curl -s -w "%{http_code}" "$CLEANUP_URL" || echo "000")

          if [[ $CLEANUP_RESPONSE == *"200"* ]]; then
            echo "✅ Cleanup script executed successfully"
          else
            echo "⚠️ Cleanup script may not have executed (HTTP: $CLEANUP_RESPONSE)"
            echo "Note: This is not critical for deployment success"
          fi

      - name: 🏥 Post-Deployment Health Check
        run: |
          echo "Waiting for deployment to settle..."
          sleep 45

          API_URL="${{ secrets.APP_URL || 'https://mockerjson.xyz' }}"

          echo "🔍 Testing API endpoints..."

          # Test main endpoint
          echo "Testing main endpoint: $API_URL"
          MAIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || echo "000")

          # Test API endpoint
          echo "Testing API endpoint: $API_URL/api/v1/products"
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/api/v1/products" || echo "000")

          # Check results
          if [ "$MAIN_STATUS" = "200" ] && [ "$API_STATUS" = "200" ]; then
            echo "✅ Health check PASSED"
            echo "🌐 Main site: HTTP $MAIN_STATUS"
            echo "🔗 API endpoint: HTTP $API_STATUS"
            echo "🎉 Deployment successful!"
          else
            echo "❌ Health check FAILED"
            echo "🌐 Main site: HTTP $MAIN_STATUS"
            echo "🔗 API endpoint: HTTP $API_STATUS"
            echo "::warning::Some endpoints may not be responding correctly"
          fi

          # Test a sample API response
          echo "🧪 Testing API response..."
          SAMPLE_RESPONSE=$(curl -s "$API_URL/api/v1/products?limit=1" | head -c 100)
          if [[ $SAMPLE_RESPONSE == *"success"* ]]; then
            echo "✅ API is returning expected JSON responses"
          else
            echo "⚠️ API response format may have issues"
          fi

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "
          ## 📋 Deployment Summary

          **🎯 Target:** ${{ secrets.APP_URL || 'https://mockerjson.xyz' }}
          **📅 Time:** $(date)
          **🔧 PHP Version:** ${{ env.PHP_VERSION }}
          **📦 Commit:** ${{ github.sha }}
          **👤 Triggered by:** ${{ github.actor }}
          **🌿 Branch:** ${{ github.ref_name }}
          **💼 Status:** ${{ job.status }}

          **🔗 Quick Links:**
          - 🏠 Homepage: ${{ secrets.APP_URL || 'https://mockerjson.xyz' }}
          - 📱 Products API: ${{ secrets.APP_URL || 'https://mockerjson.xyz' }}/api/v1/products
          - 📝 Posts API: ${{ secrets.APP_URL || 'https://mockerjson.xyz' }}/api/v1/posts

          " >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Cleanup Deployment Files
        if: always()
        run: |
          rm -rf deploy/
          rm -f .env
          echo "✅ Cleanup completed"

  # Job 3: Notify deployment result
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
      - name: 📧 Deployment Notification
        run: |
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "🎉 DEPLOYMENT SUCCESSFUL!"
            echo "✅ Tests passed"
            echo "✅ Deployment completed"
            echo "🌐 Live at: ${{ secrets.APP_URL || 'https://mockerjson.xyz' }}"
          else
            echo "💥 DEPLOYMENT FAILED!"
            echo "❌ Check the logs above for details"
            if [ "${{ needs.test.result }}" != "success" ]; then
              echo "❌ Tests failed"
            fi
            if [ "${{ needs.deploy.result }}" != "success" ]; then
              echo "❌ Deployment failed"
            fi
          fi
